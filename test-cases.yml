---
- summary: |
    Проверка регистрации нового пользователя с уникальным email и паролем
  requirement: |
    Пользователи могут регистрироваться на сайте с использованием уникального email и пароля
  prerequisites: |
    Открыта страница регистрации
  test-data: |
    Email = newuser@example.com Пароль = NewPassword123
  steps:
    - Вводим email newuser@example.com
    - Вводим пароль NewPassword123
    - Подтверждаем пароль NewPassword123
    - Нажимаем кнопку «Зарегистрироваться»
  expected-result: |
    Пользователь успешно зарегистрирован и перенаправлен на страницу входа или профиля

- summary: |
      Проверка входа на сайт через учетные данные Git или Discord
    requirement: |
      Пользователи могут авторизоваться на сайте с использованием внешних провайдеров аутентификации (Git или Discord).
    prerequisites: |
      Открыта страница входа. У пользователя есть учетная запись Git или Discord.
    test-data: |
      Git: Имя пользователя = gituser123, Пароль = GitPassword456
      Discord: Токен авторизации = DiscordToken789
    steps:
      - Открываем сайт и переходим к странице входа
      - Нажимаем кнопку «Войти через Git» или «Войти через Discord»
      - Если выбран Git:
        - Вводим имя пользователя gituser123
        - Вводим пароль GitPassword456
        - Нажимаем кнопку «Авторизоваться»
      - Если выбран Discord:
        - Разрешаем приложению доступ к данным аккаунта Discord
        - Подтверждаем авторизацию
    expected-result: |
      Пользователь успешно авторизован через выбранный провайдер (Git или Discord) и перенаправлен на главную страницу сайта. В верхнем меню отображается имя пользователя или его аватар.

- summary: |
      Проверка запуска игры авторизованным пользователем
    requirement: |
      Авторизованные пользователи могут запустить игру с главной страницы или из раздела игр.
    prerequisites: |
      Пользователь зарегистрирован на сайте, выполнен вход в систему, и он находится на главной странице. На странице присутствует кнопка "Create Game".
    test-data: |
      Email = registereduser@example.com
      Пароль = RegisteredPassword123
      Игра = "Название_Игры"
      Level = Medium
      Game Mode = Bot
      Time Control = 10 минут
      Task = Tomato
    steps:
      - Открываем сайт и переходим к странице входа
      - Вводим email registereduser@example.com
      - Вводим пароль RegisteredPassword123
      - Нажимаем кнопку «Войти»
      - На главной странице находим и нажимаем кнопку "Create Game"
      - В выпадающем списке 'Level' выбираем значение 'Medium'
      - В секции 'Game Mode' выбираем режим 'Bot'
      - В поле 'Time Control' устанавливаем значение '10 минут'
      - В модальном окне 'Task' выбираем тематику 'Tomato'
      - Нажимаем кнопку «Create Battle» для выбранной игры
    expected-result: |
      Игра успешно загружается и начинается в браузере. Интерфейс игры отображается корректно, без технических ошибок. Настройки игры соответствуют выбранным параметрам: сложность — Medium, режим — Bot, время — 10 минут, тематика — Tomato. Игровое поле, счет и таймер работают правильно.

- summary: |
      Проверка работы чата на главной странице
    requirement: |
      На главной странице должен быть доступен чат, позволяющий пользователям обмениваться сообщениями в реальном времени.
    prerequisites: |
      Пользователь зарегистрирован на сайте и выполнен вход в систему. Открыта главная страница с активным чатом.
    test-data: |
      Email = registereduser@example.com
      Пароль = RegisteredPassword123
      Сообщение = "Привет, это тестовое сообщение!"
    steps:
      - Открываем сайт и переходим к странице входа
      - Вводим email registereduser@example.com
      - Вводим пароль RegisteredPassword123
      - Нажимаем кнопку «Войти»
      - Убедиться, что чат виден на главной странице
      - Нажать на поле ввода сообщения в чате
      - Ввести текст сообщения: "Привет, это тестовое сообщение!"
      - Нажать кнопку «Отправить» или клавишу Enter
      - Проверить, что отправленное сообщение отображается в чате
    expected-result: |
      Чат успешно загружен и доступен на главной странице. Отправленное сообщение корректно отображается в чате для отправителя. Если тест выполняется с несколькими пользователями, сообщение также должно быть видно всем участникам чата в реальном времени.
      
- summary: |
      Проверка функциональности раздела "Профиль"
    requirement: |
      Раздел "Профиль" должен содержать информацию о пользователе.
    prerequisites:
      - Пользователь зарегистрирован на сайте.
      - Пользователь выполнен вход в систему.
    test-data: |
      Email = registereduser@example.com
      Пароль = RegisteredPassword123
      Новое имя = "Updated Name"
    steps:
      - Открываем сайт и переходим к странице входа
      - Вводим email registereduser@example.com
      - Вводим пароль RegisteredPassword123
      - Нажимаем кнопку «Войти»
      - На главной странице открываем меню профиля
      - Нажимаем на пункт «Мой профиль»
      - Проверяем наличие следующих данных:
        - Фото профиля
        - Имя пользователя
        - Дата регистрации
        - Ранг
        - Рейтинг
        - Количество игр
    expected-result: |
      Раздел "Профиль" корректно отображает информацию о пользователе.

- summary: |
      Проверка функциональности раздела "Настройки"
    requirement: |
      Раздел "Настройки" должен позволять пользователю изменять параметры аккаунта, такие как имя, уведомления и социальные сети.
    prerequisites:
      - Пользователь зарегистрирован на сайте.
      - Пользователь выполнен вход в систему.
    test-data: |
      Email = registereduser@example.com
      Пароль = RegisteredPassword123
    steps:
      - Открываем сайт и переходим к странице входа
      - Вводим email registereduser@example.com
      - Вводим пароль RegisteredPassword123
      - Нажимаем кнопку «Войти»
      - На главной странице открываем меню профиля
      - Нажимаем на пункт «Настройки»
      - Проверяем наличие следующих секций:
        - Имя
        - Уведомления (звук)
        - Социальные сети
      - Меняем имя на qqqq123
      - Сохраняем изменения
      - Проверяем, что имя успешно изменено
    expected-result: |
      Раздел "Настройки" позволяет пользователю изменять параметры аккаунта. После применения изменений они сохраняются и применяются корректно.

- summary: |
      Проверка функциональности раздела "Рейтинг пользователей"
    requirement: |
      Раздел "Рейтинг пользователей" должен показывать список пользователей с их рейтингами, отсортированными по убыванию.
    prerequisites:
      - Пользователь зарегистрирован на сайте.
      - Пользователь выполнен вход в систему.
    test-data: |
      Email = registereduser@example.com
      Пароль = RegisteredPassword123
    steps:
      - Открываем сайт и переходим к странице входа
      - Вводим email registereduser@example.com
      - Вводим пароль RegisteredPassword123
      - Нажимаем кнопку «Войти»
      - На главной странице открываем меню профиля
      - Нажимаем на пункт «Рейтинг пользователей»
      - Проверяем, что таблица рейтинга содержит следующие столбцы:
        - Ранг
        - Имя пользователя
        - Рейтинг
        - Количество игр
        - Дата регистрации
      - Проверяем, что пользователи отсортированы по убыванию рейтинга
      - (Опционально) Прокручиваем страницу до конца и проверяем загрузку дополнительных записей
    expected-result: |
      Раздел "Рейтинг пользователей" корректно отображает список пользователей с их рейтингами, отсортированными по убыванию. Загрузка дополнительных записей работает корректно.

- summary: |
      Проверка функциональности раздела "Упражнения"
    requirement: |
      Авторизованные пользователи могут создать упражнение из соответствующего раздела
    prerequisites:
      - Пользователь зарегистрирован на сайте.
      - Пользователь выполнен вход в систему.
    test-data: |
      Email = registereduser@example.com
      Пароль = RegisteredPassword123
      Название упражнения = "Проверка статуса"
      Сложность = "Легкая"
      Язык = "Java"
      Описание = "Напишите метод на Java, который принимает булево значение и возвращает строку 'Активно', если значение true, и 'Неактивно', если false."
      Входные параметры = "Булево значение (boolean)"
      Выходные параметры = "Строка (String)"
      Примеры:
        - Ввод: true
          Вывод: Активно
        - Ввод: false
          Вывод: Неактивно
        - Ввод: true
          Вывод: Активно
    steps:
      - Открываем сайт и переходим к странице входа
      - Вводим email registereduser@example.com
      - Вводим пароль RegisteredPassword123
      - Нажимаем кнопку «Войти»
      - На главной странице открываем меню профиля
      - Нажимаем на пункт «Упражнения»
      - Проверяем наличие следующих разделов:
        - Создать упражнение
        - Пул упражнений
      - Переходим в раздел "Создать упражнение"
      - Заполняем форму создания упражнения:
        - В поле "Название" вводим "Проверка статуса"
        - В выпадающем списке "Сложность" выбираем значение "Легкая"
        - В выпадающем списке "Язык" выбираем значение "Java"
        - В поле "Описание" вводим "Напишите метод на Java, который принимает булево значение и возвращает строку 'Активно', если значение true, и 'Неактивно', если false."
        - В поле "Входные параметры" вводим "Булево значение (boolean)"
        - В поле "Выходные параметры" вводим "Строка (String)"
        - В секции "Примеры" добавляем три примера:
          - Ввод: true, Вывод: Активно
          - Ввод: false, Вывод: Неактивно
          - Ввод: true, Вывод: Активно
          - Нажимаем кнопку «Создать»
      - Проверяем, что новое упражнение успешно создано и отображается в списке
      - Переходим в раздел "Пул упражнений"
      - Проверяем, что созданное упражнение присутствует в пуле упражнений
    expected-result: |
      Раздел "Упражнения" содержит два подраздела: "Создать упражнение" и "Пул упражнений". Пользователь может успешно создать новое упражнение на языке Java с булевым входным параметром, указав все необходимые параметры (сложность, название, описание, входные и выходные параметры, минимум три примера). Созданное упражнение появляется в пуле упражнений, и все его данные отображаются корректно.
      
- summary: |
      Проверка функциональности создания турнира по программированию
    requirement: |
      Авторизованный пользователь может создать турнир в командном режиме, указав имена двух команд, лимит участников до 64 человек, количество раундов до победы (от 1 до 5), один язык программирования и другие параметры.
    prerequisites:
      - Пользователь зарегистрирован на сайте.
      - Пользователь выполнен вход в систему.
      - У пользователя есть права на создание турниров.
    test-data: |
      Email = adminuser@example.com
      Пароль = AdminPassword123
      Название турнира = "Кубок кодинга"
      Тип турнира = "Командный"
      Имя первой команды = "Команда Alpha"
      Имя второй команды = "Команда Beta"
      Описание = "Турнир между двумя командами. Задачи средней сложности."
      Время начала = "2023-11-15T14:00:00Z"
      Доступ = "По токену"
      Ход игры = "Случайный раунд"
      Оценка игры = "Выиграл или проиграл"
      Источник упражнений = "Пул упражнений"
      Сложность = "Средний"
      Количество игроков = "64 человека"
      Язык программирования = "Java"
      Match timeout seconds = 600
      Break duration seconds = 300
      Раундов до победы = 3
    steps:
      - Открываем сайт и переходим к странице входа
      - Вводим email adminuser@example.com
      - Вводим пароль AdminPassword123
      - Нажимаем кнопку «Войти»
      - На главной странице открываем меню профиля пользователя
      - Нажимаем на пункт «Турниры»
      - Заполняем форму создания турнира:
        - В поле "Название" вводим "Кубок кодинга"
        - В выпадающем списке "Тип турнира" выбираем значение "Командный"
        - В поле "Имя первой команды" вводим "Команда Alpha"
        - В поле "Имя второй команды" вводим "Команда Beta"
        - В поле "Описание" вводим "Турнир между двумя командами. Задачи средней сложности."
        - В поле "Время начала" устанавливаем значение "2023-11-15T14:00:00Z"
        - В выпадающем списке "Доступ" выбираем значение "По токену"
        - В выпадающем списке "Ход игры" выбираем значение "Случайный раунд"
        - В выпадающем списке "Оценка игры" выбираем значение "Выиграл или проиграл"
        - В выпадающем списке "Источник упражнений" выбираем значение "Пул упражнений"
        - В выпадающем списке "Сложность" выбираем значение "Средний"
        - В поле "Количество игроков" устанавливаем значение "64 человека"
        - В выпадающем списке "Язык программирования" выбираем значение "Java"
        - В поле "Match timeout seconds" устанавливаем значение "600"
        - В поле "Break duration seconds" устанавливаем значение "300"
        - Нажимаем кнопку "Выбрать раунды до победы" и в модальном окне выбираем значение "3"
      - Нажимаем кнопку «Создать»
      - Проверяем, что новый турнир успешно создан и отображается в списке турниров
      - Переходим к детальной информации о созданном турнире
      - Проверяем корректность всех заполненных данных:
        - Название
        - Тип
        - Имена команд
        - Описание
        - Время начала
        - Доступ
        - Ход игры
        - Оценка игры
        - Источник упражнений
        - Сложность
        - Количество игроков
        - Язык программирования (только один)
        - Match timeout seconds
        - Break duration seconds
        - Раундов до победы
    expected-result: |
      Турнир успешно создан с указанными параметрами. Все настройки сохранены корректно, и их можно просмотреть в детальной информации о турнире. Выбран только один язык программирования, имена команд, лимит участников и количество раундов до победы установлены правильно. Турнир отображается в списке доступных турниров.
